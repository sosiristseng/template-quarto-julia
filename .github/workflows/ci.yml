name: Build notebooks and publish

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NPROC: '2' # Number of Julia processes to run the notebooks
  PY_VER: '3.12'
  CACHE_NUM: '1'
  JULIA_CONDAPKG_BACKEND: 'Null'
  JULIA_CI: 'true'
  JULIA_NUM_THREADS: '2'

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      id: cp
      with:
        python-version: ${{ env.PY_VER }}
    - name: Cache pip dependencies
      uses: actions/cache@v4
      id: cache-py
      with:
        save-always: 'true'
        path: ${{ env.pythonLocation }}
        key:  ${{ runner.os }}-pip-${{ env.CACHE_NUM }}-${{ steps.cp.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
    - name: Install pip dependencies if cache miss
      if: ${{ steps.cache-py.outputs.cache-hit != 'true' }}
      run: pip install -r requirements.txt
    - name: Read Julia version
      uses: SebRollen/toml-action@v1.2.0
      id: read_toml
      with:
        file: 'Manifest.toml'
        field: 'julia_version'
    - name: Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ steps.read_toml.outputs.value }}
    - name: Cache Julia packages
      uses: actions/cache@v4
      id: cache-julia
      with:
        save-always: 'true'
        path: |
          ~/.julia
          !~/.julia/registries
        key: ${{ runner.os }}-julia-${{ env.CACHE_NUM }}-${{ hashFiles('src/**', 'Project.toml', 'Manifest.toml' )}}
        restore-keys: |
          ${{ runner.os }}-julia-${{ env.CACHE_NUM }}-
    - name: Install Julia packages
      if: ${{ steps.cache-julia.outputs.cache-hit != 'true' }}
      env:
        PYTHON: ${{ env.pythonLocation }}/python
      shell: julia --color=yes {0}
      run: |
        using Pkg, Dates
        Pkg.add(["PrettyTables", "Literate"])
        Pkg.activate(".")
        Pkg.instantiate()
        Pkg.precompile()
        Pkg.gc(collect_delay=Day(0))
    - name: Cache literate notebooks
      uses: actions/cache@v4
      id: cache-nb
      with:
        path: |
          docs/**/*.ipynb
          docs/**/*.sha
        key: ${{ runner.os }}-nb-${{ hashFiles('src/**', 'Project.toml', 'Manifest.toml' )}}-${{ hashFiles('docs/**/*.jl') }}
        restore-keys: |
          ${{ runner.os }}-nb-${{ hashFiles('src/**', 'Project.toml', 'Manifest.toml' )}}-
    - name: Run literate notebooks
      run: julia --color=yes -p ${{ env.NPROC }} literate.jl
    - name: Setup Quarto
      uses: quarto-dev/quarto-actions/setup@v2
    - name: Render Quarto Project
      uses: quarto-dev/quarto-actions/render@v2
      with:
        to: html # If set, it will be equivalent to `quarto render --to html`
        path: docs # By default, the current working dir is used i.e `quarto render .`
    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        path: _site/

  deploy:
    name: Deploy to GitHub pages
    needs: CI
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
      actions: read   # to download an artifact uploaded by `actions/upload-pages-artifact@v3`
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
