name: Build notebooks and publish

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NBCONVERT_JOBS: '4'
  LITERATE_PROC: '2'
  ALLOWERRORS: 'false'
  CACHE_NUM: '1'
  JULIA_CONDAPKG_BACKEND: 'Null'
  JULIA_CI: 'true'
  NBCACHE: '.cache'
  VENV: '.venv'

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.x'
    - name: Cache virtualenv
      uses: actions/cache@v4
      id: cache-venv
      with:
        key: ${{ runner.os }}-venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
        path: ${{ env.VENV }}
    - name: Install Python dependencies
      if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
      run: |
        python -m venv ${{ env.VENV }}
        source ${{ env.VENV }}/bin/activate
        python -m pip install -r requirements.txt
    - name: Add venv to PATH
      run: |
        echo "${{ env.VENV }}/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=${{ env.VENV }}" >> $GITHUB_ENV
    - name: Cache executed notebooks
      uses: actions/cache@v4
      id: cache-nb
      with:
        path: ${{ env.NBCACHE }}
        key: ${{ runner.os }}-nb-${{ env.CACHE_NUM }}-${{ hashFiles('src/**', 'Project.toml', 'Manifest.toml') }}-${{ hashFiles('docs/**/*.ipynb', 'docs/**/*.jl') }}
        restore-keys: |
          ${{ runner.os }}-nb-${{ env.CACHE_NUM }}-${{ hashFiles('src/**', 'Project.toml', 'Manifest.toml') }}-
    - name: Read Julia version
      id: read_toml
      run: echo "value=$(python -c 'import tomllib; from pathlib import Path; print(tomllib.loads(Path("Manifest.toml").read_text())["julia_version"])')" >> "$GITHUB_OUTPUT"
    - name: Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ steps.read_toml.outputs.value }}
    - name: Restore Julia packages
      uses: actions/cache/restore@v4
      if: ${{ contains(runner.name, 'GitHub Actions') }}
      id: cache-julia
      with:
        path: |
          ~/.julia
          !~/.julia/registries
        key: ${{ runner.os }}-julia-${{ env.CACHE_NUM }}-${{ hashFiles('src/**', 'Project.toml', 'Manifest.toml') }}
        restore-keys: |
          ${{ runner.os }}-julia-${{ env.CACHE_NUM }}-
    - name: Install Julia packages
      if: ${{ !contains(runner.name, 'GitHub Actions') || steps.cache-julia.outputs.cache-hit != 'true' }}
      env:
        PYTHON: ${{ env.pythonLocation }}/python
      run: julia --color=yes instantiate.jl
    - name: Save Julia packages
      uses: actions/cache/save@v4
      if: ${{ contains(runner.name, 'GitHub Actions') && steps.cache-julia.outputs.cache-hit != 'true' }}
      with:
        path: |
          ~/.julia
          !~/.julia/registries
        key: ${{ steps.cache-julia.outputs.cache-primary-key }}
    - name: Run notebooks
      run: julia --color=yes -p ${{ env.LITERATE_PROC }} --heap-size-hint=4G run.jl
    - name: Copy back built notebooks
      run: cp --verbose -rf ${{ env.NBCACHE }}/docs/* docs/
    - name: Remove jl files
      run: find docs/ -type f -name "*.jl" -exec rm {} \;
    - name: Setup Quarto
      uses: quarto-dev/quarto-actions/setup@v2
    - name: Render Quarto Project
      uses: quarto-dev/quarto-actions/render@v2
      with:
        to: html # If set, it will be equivalent to `quarto render --to html`
        path: docs # By default, the current working dir is used i.e `quarto render .`
    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        path: _site/

  deploy:
    name: Deploy to GitHub pages
    needs: CI
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
      actions: read   # to download an artifact uploaded by `actions/upload-pages-artifact@v3`
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
